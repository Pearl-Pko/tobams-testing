generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Task          Task[]
  taskId        String?
  Subtask       Subtask[]
  Project       Project[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  tasks       Task[]
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
}

model Task {
  id               String       @id @default(uuid())
  title            String
  description      String?
  status           TaskStatus   @default(TO_DO)
  dueDate          DateTime?
  priority         TaskPriority?
  progressTotal    Int          @default(0)
  progressDone     Int          @default(0)
  project          Project      @relation(fields: [projectId], references: [id])
  projectId        String
  assignees        User[]
  subtasks         Subtask[]
  commentsCount    Int          @default(0)
  attachmentsCount Int          @default(0)
  tags             String[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Subtask {
  id         String     @id @default(uuid())
  title      String
  status     TaskStatus @default(TO_DO)
  task       Task       @relation(fields: [taskId], references: [id])
  taskId     String
  assignee   User?      @relation(fields: [assigneeId], references: [id])
  assigneeId String?
  dueDate    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
